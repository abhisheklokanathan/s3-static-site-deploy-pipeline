name: Deploy My Personal Website to S3 bucket.

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write    
jobs:
  Get-Tag-Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}    
    steps:  
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get all tags
        
    - name: Get latest semantic version
      id: get_version
      run: |
          # Get the latest tag (e.g. v1.2.3)
          LATEST_TAG=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            MINOR=$((MINOR + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
  Create-Upload-Artifact:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version]
    steps:     
    - name: Checkout source
      uses: actions/checkout@v4    
         
    - name: Create .tar.gz archive of static site
      run: |
         tar -czf my-static-site-${{ needs.Get-Tag-Version.outputs.VERSION }}.tar.gz images index.html styles
      working-directory: ${{ github.workspace }}

    - name: Upload tar archive as artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-tar-archive
        path: my-static-site-${{ needs.Get-Tag-Version.outputs.VERSION }}.tar.gz
        
  Update-Tag-Version:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version,Create-Upload-Artifact]
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      
    - name: Create Git tag for new version
      run: |
          git tag v${{ needs.Get-Tag-Version.outputs.VERSION }}
          git push origin v${{ needs.Get-Tag-Version.outputs.VERSION }}

  Deploy-to-S3-Bucket:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version,Update-Tag-Version,Create-Upload-Artifact]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4    

      - name: Download tarball artifact
        uses: actions/download-artifact@v4
        with:
          name: my-tar-archive
          path: .
          merge-multiple: true

      - name: Extract .tar.gz file
        run: |
         VERSION="${{ needs.Get-Tag-Version.outputs.VERSION }}"
         TARBALL="my-static-site-$VERSION.tar.gz"
         EXTRACT_DIR="extracted-v$VERSION"

         mkdir "$EXTRACT_DIR"
         tar -xzf "$TARBALL" -C "$EXTRACT_DIR"

         echo "Extracted contents:"
         ls -l "$EXTRACT_DIR"
      - name: AWS configure credentilas
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: us-east-1
        
      - name: Upload archive to S3
        run: |
          VERSION="${{ needs.Get-Tag-Version.outputs.VERSION }}"
          DIR="extracted-v$VERSION"

          aws s3 cp "$DIR/index.html" s3://aws-mypersonal-website/$VERSION/index.html
          aws s3 cp "$DIR/images/" s3://aws-mypersonal-website/$VERSION/images/ --recursive
          aws s3 cp "$DIR/styles/" s3://aws-mypersonal-website/$VERSION/styles/ --recursive
          aws s3 cp s3://aws-mypersonal-website/root.json root.json
          # touch root.json
          # echo '{ 
          #   "version": "$VERSION" 
          # }' > root.json       
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$VERSION\"/" root.json
          aws s3 cp "root.json" s3://aws-mypersonal-website/root.json

      # - name: Sleep for 2 minutes
      #   run: sleep 120
      - name: Get current Lambda version
        id: get_version
        run: |
          aws lambda publish-version \
            --function-name versionedUriRewriter \
            --region us-east-1
          VERSION=$(aws lambda list-versions-by-function --function-name versionedUriRewriter --query 'Versions[-1].Version' --output text)
          echo "Latest Lambda Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update CloudFront Lambda@Edge Association
        run: |
          DIST_ID="E18NW8RP4VFBMV"
          FUNCTION_ARN="arn:aws:lambda:us-east-1:761018887005:function:versionedUriRewriter:${{ steps.get_version.outputs.version }}"

          # Get current config + ETag
          aws cloudfront get-distribution-config --id $DIST_ID --output json > dist-config.json
          ETag=$(aws cloudfront get-distribution-config --id $DIST_ID --query "ETag" --output text)

          # Update only the Lambda@Edge association using jq
          jq --arg ARN "$FUNCTION_ARN" '
            .DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations = {
              "Quantity": 1,
              "Items": [
                {
                  "LambdaFunctionARN": $ARN,
                  "EventType": "viewer-request",
                  "IncludeBody": false
                }
              ]
            }' dist-config.json > updated-config.json

          # Update CloudFront
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --if-match $ETag \
            --distribution-config file://updated-config.json


