name: Deploy My Personal Website to S3 bucket.

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write    
jobs:
  Get-Tag-Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}    
    steps:  
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get all tags
        
    - name: Get latest semantic version
      id: get_version
      run: |
          # Get the latest tag (e.g. v1.2.3)
          LATEST_TAG=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            MINOR=$((MINOR + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
  Create-Upload-Artifact:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version]
    steps:     
    - name: Checkout source
      uses: actions/checkout@v4    
         
    - name: Create .tar.gz archive of static site
      run: |
         tar -czf my-static-site-${{ needs.Get-Tag-Version.outputs.VERSION }}.tar.gz images index.html styles
      working-directory: ${{ github.workspace }}

    - name: Upload tar archive as artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-tar-archive
        path: my-static-site-${{ needs.Get-Tag-Version.outputs.VERSION }}.tar.gz
        
  Update-Tag-Version:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version,Create-Upload-Artifact]
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      
    - name: Create Git tag for new version
      run: |
          git tag v${{ needs.Get-Tag-Version.outputs.VERSION }}
          git push origin v${{ needs.Get-Tag-Version.outputs.VERSION }}

  Deploy-to-S3-Bucket:
    runs-on: ubuntu-latest
    needs: [Get-Tag-Version,Update-Tag-Version,Create-Upload-Artifact]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4    

      - name: Download tarball artifact
        uses: actions/download-artifact@v4
        with:
          name: my-tar-archive
          path: .
          merge-multiple: true

      - name: Extract .tar.gz file
        run: |
         VERSION="${{ needs.Get-Tag-Version.outputs.VERSION }}"
         TARBALL="my-static-site-$VERSION.tar.gz"
         EXTRACT_DIR="extracted-v$VERSION"

         mkdir "$EXTRACT_DIR"
         tar -xzf "$TARBALL" -C "$EXTRACT_DIR"

         echo "Extracted contents:"
         ls -l "$EXTRACT_DIR"
      - name: AWS configure credentilas
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: us-east-1
        
      - name: Upload archive to S3
        run: |
          VERSION="${{ needs.Get-Tag-Version.outputs.VERSION }}"
          DIR="extracted-v$VERSION"

          aws s3 cp "$DIR/index.html" s3://aws-mypersonal-website/$VERSION/index.html
          aws s3 cp "$DIR/images/" s3://aws-mypersonal-website/$VERSION/images/ --recursive
          aws s3 cp "$DIR/styles/" s3://aws-mypersonal-website/$VERSION/styles/ --recursive
          #aws s3 cp s3://aws-mypersonal-website/root.json root.json
          touch root.json
          echo '{ 
            "version": "$VERSION" 
          }' > root.json       
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$VERSION\"/" root.json
          aws s3 cp "root.json" s3://aws-mypersonal-website/root.json

      # - name: Sleep for 2 minutes
      #   run: sleep 120

      - name: Get current Lambda version
        id: get_version
        run: |
          # Publish the new Lambda version
          publish_response=$(aws lambda publish-version --function-name versionedUriRewriter --region us-east-1)
    
          # Extract the ARN and version number from the response
          FUNCTION_ARN=$(echo $publish_response | jq -r '.FunctionArn')
          VERSION=$(echo $publish_response | jq -r '.Version')

          # Output the version and ARN for the next step
          echo "Latest Lambda Version: $VERSION"
          echo "LambdaArn=$FUNCTION_ARN" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update CloudFront with new Lambda version
        run: |
          # Use the function ARN passed from the previous step
          FUNCTION_ARN=${{ env.LambdaArn }}
          DIST_ID="E18NW8RP4VFBMV"  # Replace with your CloudFront distribution ID

          # Get the current ETag from CloudFront distribution
          ETAG=$(aws cloudfront get-distribution-config --id $DIST_ID --query 'ETag' --output text)

          # Ensure that your distribution_config.json file exists or generate it dynamically
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --if-match $ETAG \
            --distribution-config file://distribution_config.json \
            --default-cache-behavior "{\"LambdaFunctionAssociations\":{\"Quantity\":1,\"Items\":[{\"LambdaFunctionARN\":\"$FUNCTION_ARN\",\"EventType\":\"viewer-request\",\"IncludeBody\":false}]}}"

           echo "âœ… CloudFront distribution updated with new Lambda version."         

      # - name: Get Current CloudFront Distribution Config
      #   id: get_distribution
      #   run: |
      #     # Fetch the CloudFront distribution config
      #     aws cloudfront get-distribution-config --id E18NW8RP4VFBMV --region us-east-1 > dist-config.json
      #     ETag=$(jq -r '.ETag' dist-config.json)
      #     echo "etag=$ETag" >> $GITHUB_OUTPUT


      # - name: Update CloudFront Distribution Lambda Association
      #   run: |
      #     # Get the Lambda ARN with the specific version
      #     NEW_LAMBDA_ARN="arn:aws:lambda:us-east-1:761018887005:function:versionedUriRewriter:${{ steps.get_version.outputs.version }}"
    
      #     # Fetch the distribution config
      #     DIST_CONFIG=$(cat dist-config.json)

      #     # Modify only the Lambda function ARN for the viewer-request event
      #     UPDATED_DIST_CONFIG=$(echo "$DIST_CONFIG" | jq --arg new_lambda_arn "$NEW_LAMBDA_ARN" '.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items[0].LambdaFunctionARN = $new_lambda_arn')

      #      # Apply the updated CloudFront distribution config (only changing the Lambda function association)
      #      echo "$UPDATED_DIST_CONFIG" > updated-config.json


      # - name: Apply the updated CloudFront configuration
      #   run: |
      #     aws cloudfront update-distribution --id E18NW8RP4VFBMV --if-match ${{ steps.get_distribution.outputs.etag }} --distribution-config file://updated-config.json --region us-east-1





